/**
 * @file gestorArtista.h
 * @brief Header file for managing artist related operations.
 * 
 * This file contains the declarations of functions and structures used to 
 * manage artists and their discographies.
 */

#ifndef GESTORARTISTA_H
#define GESTORARTISTA_H

#include <glib.h>
#include "../entities/Artista.h"
#include "../entities/Musica.h"

#define MAX_ARTISTS 10001

/**
 * @struct DiscoArtist
 * @brief Structure to store information about an artist's discography.
 */
typedef struct DiscoArtist DiscoArtist;

/**
 * @brief Processes the input file and creates artist structures.
 *
 * @param filename The name of the file containing artist data.
 * @return A hash table containing the artist structures.
 */
GHashTable *build_artist_hash(const gchar *filename);

/**
 * @brief Retrieves an artist by their ID.
 *
 * @param artistas The hash table containing artist data.
 * @param id The ID of the artist.
 * @return A pointer to the `Artista` structure.
 */
Artista *getArtistaById(GHashTable *artistas, gint id);

/**
 * @brief Retrieves artists by country.
 *
 * @param table The hash table containing artist data.
 * @param country The country to filter artists by.
 * @return A hash table containing artists from the specified country.
 */
GHashTable *get_Artists_by_Country(GHashTable *table, gchar *country);

/**
 * @brief Creates a new DiscoArtist structure.
 *
 * @return A pointer to the newly created DiscoArtist structure.
 */
DiscoArtist *newDiscoArtist();

/**
 * @brief Gets the discography of an artist.
 *
 * @param d Pointer to the DiscoArtist structure.
 * @return The discography of the artist.
 */
gint getDiscografia(DiscoArtist *d);

/**
 * @brief Gets the ID of the artist's discography.
 *
 * @param d Pointer to the DiscoArtist structure.
 * @return The ID of the artist's discography.
 */
gint getDiscografiaArtistaId(DiscoArtist *d);

/**
 * @brief Sets the discography of an artist.
 *
 * @param d Pointer to the DiscoArtist structure.
 * @param discografia The discography to set.
 */
void setDiscografia(DiscoArtist *d, gint discografia);

/**
 * @brief Sets the artist ID for a DiscoArtist structure.
 *
 * @param d Pointer to the DiscoArtist structure.
 * @param id The artist ID to set.
 */
void setArtistaDiscoArtistId(DiscoArtist *d, gint id);

/**
 * @brief Creates an array of artist discographies.
 *
 * @param artistas The hash table containing artist data.
 * @return A pointer array containing the artist discographies.
 */
DiscoArtist **makeDiscografiaArtistas(GHashTable *artistas);

/**
 * @brief Removes a DiscoArtist structure.
 *
 * @param d Pointer to the DiscoArtist structure to be removed.
 */
void removeDiscoArtist(DiscoArtist *d);

/**
 * @brief Calculates the revenue generated by an artist.
 *
 * @param id The ID of the artist.
 * @param musicas The hash table containing music data.
 * @param artistas The hash table containing artist data.
 * @return The revenue generated by the artist.
 */
double makeRevenue(gint id, GHashTable *musicas, GHashTable *artistas);

/**
 * @brief Creates a weekly top list of artists.
 *
 * @param artistas The hash table containing artist data.
 * @return A 2D array containing the weekly top artists.
 */
DiscoArtist ***makeWeeklyTop(GHashTable *artistas);

/**
 * @brief Frees memory for the weekly top artist array.
 *
 * @param array The 2D array of DiscoArtist pointers to be freed.
 */
void freeWeeklyTop(DiscoArtist ***array);

/**
 * @brief Computes cumulative artist rankings.
 *
 * @param weeklyTop The 2D array containing weekly top artists.
 * @return A hash table with cumulative rankings for artists.
 */
GHashTable **computeCumulativeRankings(DiscoArtist ***weeklyTop);

/**
 * @brief Calculates the user's favorite artist.
 *
 * @param artist_stats A hash table containing artist statistics.
 * @param artistas_table The hash table containing artist data.
 * @return The name of the user's favorite artist.
 */
gint calcularArtistaFavorito(GHashTable *artist_stats, GHashTable *artistas_table);

/**
 * @brief Updates artist statistics based on music play.
 *
 * @param musica Pointer to the Musica structure representing the music played.
 * @param artist_stats Hash table containing artist statistics.
 * @param duracao The duration of the music played.
 */
void atualizarEstatisticasArtista(Musica *musica, GHashTable *artist_stats, gint duracao);

/**
 * @brief Shows the top N artists of an user.
 *
 * @param artist_stats A hash table containing artist statistics.
 * @param artistas_table The hash table containing artist data.
 * @param N The number of top artists to show.
 * @param output A pointer to the output array of artist names.
 * @param output_size A pointer to the size of the output array.
 * @param separator The character to separate artist names in the output.
 */
void mostrarTopNArtistas(GHashTable *artist_stats, GHashTable *artistas_table, gint N, gchar ***output, gint *output_size, gchar separator);

#endif  // GESTORARTISTA_H
